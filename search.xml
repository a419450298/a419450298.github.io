<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wireshark从入门到实战</title>
      <link href="/2025/01/05/wireshark%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/"/>
      <url>/2025/01/05/wireshark%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<div class="video-container"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1551799429&bvid=BV1yy421v7Cm&cid=1474058552&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style><h2 id="wireshark从入门到实战"><a href="#wireshark从入门到实战" class="headerlink" title="wireshark从入门到实战"></a>wireshark从入门到实战</h2><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p><strong>Wireshark 是什么？</strong></p><p>Wireshark 是一款免费开源的网络协议分析器，也被称为“抓包工具”或“网络嗅探器”。它可以捕获网络数据包并以易于理解的格式显示出来，让用户能够深入了解网络通信的细节。它就像一个网络世界的“显微镜”，帮助我们观察网络中发生的事情。</p><p><strong>Wireshark 的主要功能：</strong></p><ul><li><strong>捕获数据包：</strong> Wireshark 可以从各种网络接口（如以太网卡、无线网卡等）捕获实时数据包。它支持多种捕获技术，包括 libpcap&#x2F;WinPcap。</li><li><strong>详细分析：</strong> 捕获到的数据包会被 Wireshark 解析成易于理解的格式，显示每个数据包的协议、源地址、目标地址、端口号、数据内容等详细信息。</li><li><strong>协议支持：</strong> Wireshark 支持数百种网络协议，包括 TCP、UDP、IP、HTTP、HTTPS、DNS、FTP 等，并且不断更新以支持新的协议。</li><li><strong>过滤功能：</strong> Wireshark 提供了强大的过滤功能，允许用户根据各种条件（如协议、地址、端口等）筛选出感兴趣的数据包，从而专注于分析特定的网络流量。</li><li><strong>统计功能：</strong> Wireshark 可以生成各种统计信息，例如数据包数量、字节数、协议分布等，帮助用户了解网络流量的整体情况。</li><li><strong>数据包着色：</strong> Wireshark 可以根据不同的协议或规则对数据包进行着色，方便用户快速识别和区分不同的网络流量。</li><li><strong>导出功能：</strong> Wireshark 可以将捕获到的数据包导出为多种格式，例如 pcap、pcapng、文本文件等，方便用户进行进一步的分析和处理。</li></ul><p><strong>官网: <a href="https://wireshark.org/">https://wireshark.org</a></strong> </p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_03-34-26.png" style="zoom:50%;" /><p>根据自己的电脑系统及架构选择对应版本，我选择下载windows X64版本</p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_03-36-34.png" style="zoom:50%;" /><p>安装时一路点击“下一步”</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_03-42-45.png"></p><p>如果需要andriod抓包需要把Androiddump也要勾选上</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_03-44-29.png"></p><p>下一步选择在desktop上展示icon，同时一定要把Npcap勾上，wireshark在windows上是选择Npcap作为底部的抓包引擎。</p><p>Npcap.exe也会被安装一般不用勾选任何选项。</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_03-46-56.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_03-52-46.png"></p><h2 id="2-界面介绍"><a href="#2-界面介绍" class="headerlink" title="2. 界面介绍"></a>2. 界面介绍</h2><p>初次打开会让选择网卡</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_03-54-31.png"></p><p>我使用的是笔记本采用WIFI上网的所以我们以WLAN为例，看一下主要布局。当然如果是插网线的话可以看到自己的链接的网络是哪一个或者看有没有跑“波浪线”。</p><p>界面介绍</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_04-01-17.png"></p><p>下面讲解数据包分层结构</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_05-00-07.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_04-24-06.png"></p><ul><li>物理层：</li></ul><p>Frame代表的物理层：信息块提供了关于该数据包的非常详细的元数据，包括捕获时间、接口、封装类型、长度、时间差、协议栈等。这些信息对于理解网络中发生的事情、进行网络故障排除、安全分析至关重要。</p><p>数据链路层：</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_04-41-58.png"></p><p>以太网帧的关键信息，包括源 MAC 地址、目标 MAC 地址和帧类型。从数据链路层可以看到数据是从wifi网卡发送到小米路由器。</p><ul><li>网络层：</li></ul><p>看可以到数据采用的是IPV4协议，以及数据是从源ip地址发送到目标ip地址</p><ul><li>传输层：</li></ul><p>TCP协议显示的传输层，可以看到源端口和目标端口</p><ul><li>应用层:</li></ul><p>以图中的显示就是http协议。</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>初学者使用wireshark时遇到的难点是面对海量的请求无从下手，这时候我们就需要使用到过滤器。</p><p>过滤器分为两种</p><ul><li>显示过滤器：在已捕获的数据包集合中设置过滤条件，隐藏不想显示的数据包，只显示符合条件的数据包。</li><li>捕获过滤器：在抓包之前就设定好过滤条件，然后只抓取符合条件的数据包。</li></ul><h3 id="3-1-显示过滤器"><a href="#3-1-显示过滤器" class="headerlink" title="3.1 显示过滤器"></a>3.1 显示过滤器</h3><p>下面介绍显示过滤器，显示过滤器最重要的就是ip地址</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_05-23-29.png"></p><p>如果部分内容不知道怎么写我们可以选中其中内容作为过滤器应用进行添加</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_05-25-58.png"></p><h4 id="3-1-1-过滤值比较符号及表达式之间的组合"><a href="#3-1-1-过滤值比较符号及表达式之间的组合" class="headerlink" title="3.1.1 过滤值比较符号及表达式之间的组合"></a>3.1.1 过滤值比较符号及表达式之间的组合</h4><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/2020031721114584.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/2020031721123617.png"></p><h4 id="3-1-2-针对ip的过滤"><a href="#3-1-2-针对ip的过滤" class="headerlink" title="3.1.2 针对ip的过滤"></a>3.1.2 针对ip的过滤</h4><ul><li>对源地址进行过滤</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.src == 192.168.0.1</span><br></pre></td></tr></table></figure><ul><li>对目的地址进行过滤</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.dst == 192.168.0.1</span><br></pre></td></tr></table></figure><ul><li>对源地址或者目的地址进行过滤</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr == 192.168.0.1</span><br></pre></td></tr></table></figure><ul><li>如果想排除以上的数据包，只需要将其用括号囊括，然后使用 “!” 即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!(ip.addr == 192.168.0.1)</span><br></pre></td></tr></table></figure><h4 id="3-1-3-针对协议的过滤"><a href="#3-1-3-针对协议的过滤" class="headerlink" title="3.1.3 针对协议的过滤"></a>3.1.3 针对协议的过滤</h4><ul><li>获某种协议的数据包，表达式很简单仅仅需要把协议的名字输入即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http</span><br></pre></td></tr></table></figure><p>注意：是否区分大小写？答：区分，<code>只能为小写</code></p><ul><li>捕获多种协议的数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http or telnet</span><br></pre></td></tr></table></figure><ul><li>排除某种协议的数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">not arp   或者   !tcp</span><br></pre></td></tr></table></figure><h4 id="3-1-4-针对端口的过滤（视传输协议而定）"><a href="#3-1-4-针对端口的过滤（视传输协议而定）" class="headerlink" title="3.1.4 针对端口的过滤（视传输协议而定）"></a>3.1.4 针对端口的过滤（视传输协议而定）</h4><ul><li>捕获某一端口的数据包（以tcp协议为例）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.port == 80</span><br></pre></td></tr></table></figure><ul><li>捕获多端口的数据包，可以使用and来连接，下面是捕获高于某端口的表达式（以udp协议为例）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">udp.port &gt;= 2048</span><br></pre></td></tr></table></figure><h4 id="3-1-5-针对长度和内容的过滤"><a href="#3-1-5-针对长度和内容的过滤" class="headerlink" title="3.1.5 针对长度和内容的过滤"></a>3.1.5 针对长度和内容的过滤</h4><ul><li>针对长度的过虑（这里的长度指定的是数据段的长度）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">udp.length &lt; 20   </span><br><span class="line">http.content_length &lt;=30</span><br></pre></td></tr></table></figure><ul><li>针对uri 内容的过滤</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.uri matches <span class="string">&quot;user&quot;</span> (请求的uri中包含“user”关键字的)</span><br></pre></td></tr></table></figure><p>注意：<code>matches</code> 后的关键字是<code>不区分大小写</code>的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.uri contains <span class="string">&quot;User&quot;</span> (请求的uri中包含“user”关键字的)</span><br></pre></td></tr></table></figure><p>注意：<code>contains</code> 后的关键字是<code>区分大小写</code>的！</p><h4 id="3-1-6-针对http请求的一些过滤实例。"><a href="#3-1-6-针对http请求的一些过滤实例。" class="headerlink" title="3.1.6 针对http请求的一些过滤实例。"></a>3.1.6 针对http请求的一些过滤实例。</h4><ul><li>过滤出请求地址中包含“user”的请求，不包括域名；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.uri contains <span class="string">&quot;User&quot;</span></span><br></pre></td></tr></table></figure><ul><li>精确过滤域名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.host==baidu.com</span><br></pre></td></tr></table></figure><ul><li>模糊过滤域名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.host contains <span class="string">&quot;baidu&quot;</span></span><br></pre></td></tr></table></figure><ul><li>过滤请求的content_type类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.content_type ==<span class="string">&quot;text/html&quot;</span></span><br></pre></td></tr></table></figure><ul><li>过滤http请求方法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method==<span class="string">&quot;POST&quot;</span></span><br></pre></td></tr></table></figure><ul><li>过滤tcp端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp.port==80</span><br><span class="line">http &amp;&amp; tcp.port==80 or tcp.port==5566</span><br></pre></td></tr></table></figure><ul><li>过滤http响应状态码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.response.code==302</span><br></pre></td></tr></table></figure><ul><li>过滤含有指定cookie的http数据包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.cookie contains <span class="string">&quot;userid&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-捕获过滤器"><a href="#3-2-捕获过滤器" class="headerlink" title="3.2 捕获过滤器"></a>3.2 捕获过滤器</h3><p>例如我们只想捕获IP地址为192.168.0.5的数据包填写为host 192.168.0.5 ，点击开始就开始捕获了</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_05-52-39.png"></p><h4 id="3-2-1-比较符号"><a href="#3-2-1-比较符号" class="headerlink" title="3.2.1 比较符号"></a>3.2.1 比较符号</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">与：&amp;&amp;或者and</span><br><span class="line">或：||或者or</span><br><span class="line">非：！或者not</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src or dst portrange 6000-8000 &amp;&amp; tcp or ip6</span><br></pre></td></tr></table></figure><h4 id="3-2-2-常用表达式实例"><a href="#3-2-2-常用表达式实例" class="headerlink" title="3.2.2 常用表达式实例"></a>3.2.2 常用表达式实例</h4><ul><li>源地址过滤</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>目的地址过滤</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>目的地址端口过滤</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst post 80</span><br></pre></td></tr></table></figure><ul><li>协议过滤</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">udp</span><br></pre></td></tr></table></figure><h2 id="4-其他知识"><a href="#4-其他知识" class="headerlink" title="4. 其他知识"></a>4. 其他知识</h2><h3 id="4-1-arp"><a href="#4-1-arp" class="headerlink" title="4.1 arp"></a>4.1 arp</h3><p><strong>ARP 的作用</strong></p><p>ARP 是一种网络协议，它主要用于将 <strong>IP 地址</strong> 解析为对应的 <strong>物理地址（MAC 地址）</strong>。简单来说，ARP 就是一个“翻译官”，它负责在局域网 (LAN) 中找到与特定 IP 地址关联的设备的 MAC 地址。</p><p><strong>为什么需要 ARP？</strong></p><p>在网络通信中，IP 地址用于在网络层标识设备，而 MAC 地址用于在数据链路层标识设备。当一个设备需要向另一个设备发送数据时，它需要知道目标设备的 IP 地址和 MAC 地址。</p><ul><li><strong>IP 地址：</strong> 用于在网络层进行路由，确定数据包的传输路径。</li><li><strong>MAC 地址：</strong> 用于在数据链路层进行寻址，将数据帧发送到正确的设备。</li></ul><p>当一个设备知道目标设备的 IP 地址，但不知道其 MAC 地址时，就需要使用 ARP 来获取目标设备的 MAC 地址。</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_06-05-52.png"></p><h3 id="4-2-DNS"><a href="#4-2-DNS" class="headerlink" title="4.2 DNS"></a>4.2 DNS</h3><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/464291-20170703113844956-354755333.jpg"></p><p><strong>DNS 的作用</strong></p><p>DNS 是互联网的核心基础设施之一，它主要负责将 <strong>域名</strong> 转换为对应的 <strong>IP 地址</strong>。简单来说，DNS 就像互联网的“电话簿”，它将我们熟悉的网站名称（如 <code>www.google.com</code>）翻译成计算机可以理解的 IP 地址（如 <code>172.217.160.142</code>）。</p><p><strong>为什么需要 DNS？</strong></p><ul><li><strong>方便用户：</strong> 人类更容易记住和使用域名，而不是复杂的 IP 地址。DNS 允许用户使用易于记忆的域名来访问网站，而无需记住 IP 地址。</li><li><strong>IP 地址变化：</strong> 网站的 IP 地址可能会发生变化，例如服务器迁移或负载均衡。DNS 允许网站更改 IP 地址，而无需用户更改访问方式，用户仍然可以使用相同的域名访问网站。</li><li><strong>资源管理：</strong> DNS 可以帮助管理网络资源，例如将域名指向不同的服务器，实现负载均衡和故障转移。</li></ul><p><strong>DNS 的工作原理</strong></p><p>DNS 的工作原理可以概括为以下步骤：</p><ol><li><p><strong>用户发起请求：</strong> 当用户在浏览器中输入一个域名（例如 <code>www.example.com</code>）时，计算机需要知道该域名对应的 IP 地址。</p></li><li><p>本地 DNS 解析器：</p><p>用户的计算机首先会查询本地 DNS 解析器（通常是你的路由器或 ISP 提供的 DNS 服务器），看是否已经缓存了该域名对应的 IP 地址。</p><ul><li>如果本地 DNS 解析器缓存了该域名对应的 IP 地址，则直接返回 IP 地址给用户。</li><li>如果本地 DNS 解析器没有缓存该域名对应的 IP 地址，则会向根 DNS 服务器发起查询请求。</li></ul></li><li><p><strong>根 DNS 服务器：</strong> 根 DNS 服务器是 DNS 系统的最高层级，它会返回负责顶级域名（TLD，如 <code>.com</code>、<code>.org</code>、<code>.net</code>）的 DNS 服务器的地址。</p></li><li><p><strong>顶级域名 DNS 服务器：</strong> 顶级域名 DNS 服务器会返回负责二级域名（如 <code>example.com</code>）的 DNS 服务器的地址。</p></li><li><p><strong>权威 DNS 服务器：</strong> 负责二级域名的权威 DNS 服务器会返回该域名（如 <code>www.example.com</code>）对应的 IP 地址。</p></li><li><p><strong>本地 DNS 解析器缓存：</strong> 本地 DNS 解析器会将查询到的 IP 地址缓存起来，以便下次访问相同的域名时可以更快地响应。</p></li><li><p><strong>用户连接网站：</strong> 用户的计算机获得 IP 地址后，就可以使用该 IP 地址连接到目标网站服务器。</p></li></ol><p><strong>DNS 服务器的类型</strong></p><ul><li><strong>根 DNS 服务器：</strong> DNS 系统的最高层级，负责管理顶级域名。</li><li><strong>顶级域名 DNS 服务器：</strong> 负责管理顶级域名（如 <code>.com</code>、<code>.org</code>、<code>.net</code> 等）。</li><li><strong>权威 DNS 服务器：</strong> 负责管理特定的域名，提供该域名对应的 IP 地址。</li><li><strong>递归 DNS 服务器（本地 DNS 解析器）：</strong> 负责接收用户的 DNS 查询请求，并递归地查询其他 DNS 服务器，直到找到目标 IP 地址。</li></ul><p><strong>DNS 记录的类型</strong></p><ul><li><strong>A 记录：</strong> 将域名映射到 IPv4 地址。</li><li><strong>AAAA 记录：</strong> 将域名映射到 IPv6 地址。</li><li><strong>CNAME 记录：</strong> 将一个域名指向另一个域名（别名）。</li><li><strong>MX 记录：</strong> 指定邮件服务器的地址。</li><li><strong>TXT 记录：</strong> 存储文本信息（例如 SPF 记录）。</li><li><strong>NS 记录：</strong> 指定域名服务器的地址。</li></ul><p><strong>DNS 的重要性</strong></p><ul><li><strong>互联网访问：</strong> 没有 DNS，用户将无法使用域名访问网站，只能记住复杂的 IP 地址。</li><li><strong>网络服务：</strong> DNS 是互联网上各种服务的基础，包括网站、邮件、云服务等。</li><li><strong>资源管理：</strong> DNS 允许网站灵活地管理网络资源，实现负载均衡和故障转移。</li><li><strong>安全：</strong> DNS 安全对于保护用户免受网络攻击至关重要 (例如 DNS 劫持)。</li></ul><p>在wireshark中dns是明文显示的</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_06-16-12.png"></p><p>本地电脑可以配置Doh防止被劫持，图中使用的阿里云，记得还要开启时使用未加密请求。这样wireshark就分析不出来使用的是那个网站了。</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_06-18-59.png"></p><h3 id="4-4-tcp"><a href="#4-4-tcp" class="headerlink" title="4.4 tcp"></a>4.4 tcp</h3><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3hpYW9saW5jb2Rlci9JbWFnZUhvc3QyLyVFOCVBRSVBMSVFNyVBRSU5NyVFNiU5QyVCQSVFNyVCRCU5MSVFNyVCQiU5Qy9UQ1AtJUU0JUI4JTg5JUU2JUFDJUExJUU2JThGJUExJUU2JTg5JThCJUU1JTkyJThDJUU1JTlCJTlCJUU2JUFDJUE.png"></p><p>在wireshark中可以看到整体过程</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_06-28-05.png"></p><h3 id="4-5-TLS"><a href="#4-5-TLS" class="headerlink" title="4.5 TLS"></a>4.5 TLS</h3><p><strong>TLS 的作用</strong></p><p>TLS 是一种加密协议，它主要用于在网络通信中提供 <strong>数据加密、身份验证和数据完整性</strong> 的保障。简单来说，TLS 就像一个安全通道，它确保在客户端和服务器之间传输的数据是加密的，并且可以验证通信双方的身份，防止数据被窃听、篡改或伪造。</p><p>完整说明请查看相关文章或视频</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_06-51-45.png"></p><p><strong>TLS四次握手是TLS协议中用于建立安全连接的过程。它包括以下步骤： 1. 客户端向服务器发送ClientHello消息，包含客户端支持的协议版本、加密算法和随机数等信息。 2. 服务器向客户端发送ServerHello消息，包含服务器选择的协议版本、加密算法和随机数等信息。 3. 服务器向客户端发送Certificate消息，包含服务器的证书信息。 4. 服务器向客户端发送ServerHelloDone消息，表示服务器已经准备好进行安全通信。 TLS四次握手的目的是确保双方都能够协商出一个安全的连接参数，并验证对方的身份。这个过程是加密通信的基础，可以保护数据在传输过程中的安全性。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_06-37-08.png"></p><p><a href="https://blog.csdn.net/ArtAndLife/article/details/114240424">TLS&#x2F;SSL四次握手及wireshark抓包分析</a></p><h2 id="5-wireshark解密https"><a href="#5-wireshark解密https" class="headerlink" title="5.wireshark解密https"></a>5.wireshark解密https</h2><p>上述理论基础具备后就是重要的解密步骤</p><p><a href="https://cloud.tencent.com/developer/article/2354010">WireShark解密HTTPS流量</a></p><p>解密的关键就是wireshark读取premaster secret就可以解密https的消息了</p><p>配置步骤</p><h3 id="5-1-新建环境变量"><a href="#5-1-新建环境变量" class="headerlink" title="5.1 新建环境变量"></a>5.1 新建环境变量</h3><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_06-59-05.png"></p><p>新建一个环境变量，其中SSLKEYLOGFILE必须大写，下面为指定路径</p><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_07-01-42.png"></p><p>这里就放在桌面了</p><h3 id="5-2-在wireshark中"><a href="#5-2-在wireshark中" class="headerlink" title="5.2 在wireshark中"></a>5.2 在wireshark中</h3><ul><li>中文：编辑 &gt; 首选项 &gt; protocols &gt; ssl (最新版wireshark已经将SSL改为TLS，其实ssl&#x2F;tls都已统称通信加密协议)</li><li>English：Edit &gt; Preferences &gt; protocols &gt; ssl (最新版wireshark已经将SSL改为TLS，其实ssl&#x2F;tls都已统称通信加密协议)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_07-50-36.png"></p><h3 id="5-3-验证"><a href="#5-3-验证" class="headerlink" title="5.3 验证"></a>5.3 验证</h3><p><img src="https://cdn.jsdelivr.net/gh/a419450298/PicGO@master/Snipaste_2025-01-05_08-23-49.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建samba服务实现文件共享</title>
      <link href="/2025/01/01/%E6%90%AD%E5%BB%BAsamba%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
      <url>/2025/01/01/%E6%90%AD%E5%BB%BAsamba%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<div class="video-container"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=22195097&bvid=BV1GW411j7TG&cid=36719721&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style><p>在一些中小型网络，或者企业的内部网中，利用 Linux 建立文件服务器是一个很好的解决方案。针对企业内部网中的绝大部分客户机采用 Windows 的情况，我们可以通过使用 Samba 来实现文件服务器功能。<br>Samba 是在 Linux 及 Unix 上实现 SMB（Server Message Block）协议的一个免费软件，由服务器及客户端程序构成。这里我们只介绍服务器程序。<br>我们首先介绍一些 SMB 协议的情况。SMB 协议是建立在 NetBIOS 协议之上的应用协议，是基于 TCP138、139 两个端口的服务。NetBIOS 出现之后，Microsoft 就使用 NetBIOS 实现了一个网络文件&#x2F;打印服务系统。这个系统基于 NetBIOS 设定了一套文件共享协议，Microsoft 称之为 SMB（Server Message Block）协议。这个协议被用于 Lan Manager 和 Windows 服务器系统中，实现不同计算机之间共享打印机和文件等。因此，为了让 Windows 和 Unix&#x2F;Linux 计算机相集成，最好的办法就是在 Unix&#x2F;Linux 计算机中安装支持 SMB 协议的软件。这样使用 Windows 的客户端不需要更改设置，就能像使用 Windows NT 或 Windows 2000 服务器一样，使用 Unix&#x2F;Linux 计算机上的共享资源了。Samba 使 SMB 协议运行在 NetBIOS 协议上，并且使用 Windows 的 NetBEUI 协议让 Unix&#x2F;Linux 服务器可以在 Windows 的网络邻居上被访问到。</p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##（首先更新系统的软件下载源）</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="comment">##（可选对ubuntu进行系统升级！）</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get upgrade</span><br><span class="line"><span class="comment">## 正式安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install samba</span><br><span class="line"><span class="comment">## 安装结束后创建Samba用户，用户名及密码</span></span><br><span class="line"><span class="built_in">sudo</span> smbpasswd -a xxx  <span class="comment">## xxx为用户名</span></span><br><span class="line"><span class="comment">##（输入密码2次：）</span></span><br><span class="line">New SMB password:</span><br><span class="line">Retype new SMB password:</span><br><span class="line"></span><br><span class="line"><span class="comment">## 备份原配置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/samba/smb.conf /etc/samba/smb.conf.bak</span><br><span class="line"><span class="comment">## 编辑配置文件</span></span><br><span class="line"><span class="built_in">sudo</span> gedit /etc/samba/smb.conf</span><br><span class="line"><span class="comment">## 如果提示 gedit:1505157): Gtk-WARNING **: 23:46:14.954: cannot open display:可以通过vim进行编辑</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><h2 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h2><h3 id="配置文件常用指令说明"><a href="#配置文件常用指令说明" class="headerlink" title="配置文件常用指令说明:"></a>配置文件常用指令说明:</h3><p>comment&#x3D;STRING :注释；<br>path&#x3D;&#x2F;PATH&#x2F;TO&#x2F;FILENAME :当前共享所映射的文件系统路径；<br>browseable&#x3D;YES :是否可浏览，指是否可被用户查看；<br>guest ok&#x3D;YES :是否允许来宾账号访问；<br>browseable &#x3D; No :是否公开目录<br>writable&#x3D;YES :是否可写；<br>read only &#x3D; no|yes :是否为只读<br>write list&#x3D;&#x2F;PATH&#x2F;TO&#x2F;user_list :拥有写权限的用户列表；</p><p><strong>在文件尾部添加以下内容，根据自己需要修改，并保存文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">path = /media/pi  <span class="comment">## 路径建议提前分配好读写权限 sudo chmod -R 777 /media/pi</span></span><br><span class="line">available = <span class="built_in">yes</span></span><br><span class="line">browsealbe = <span class="built_in">yes</span></span><br><span class="line">valid usere = pi     <span class="comment">## 创建的用户名</span></span><br><span class="line">writable = <span class="built_in">yes</span></span><br><span class="line">guest ok = no</span><br><span class="line"><span class="built_in">read</span> only = no</span><br></pre></td></tr></table></figure><ul><li>[share] 是共享文件夹显示的名称</li><li>上面配置了禁止匿名登录，允许用户读写文件</li><li>更多配置方式<a href="https://www.samba.org/">https://www.samba.org/</a></li><li>注意 如果共享的文件夹中包含中文可能会出现乱码，建议在[global]修改字符集为 utf-8</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 原有</span></span><br><span class="line">   display charset = cp936</span><br><span class="line">   unix charset = cp936</span><br><span class="line">   dos  charset = cp936</span><br><span class="line"><span class="comment">## 更改为</span></span><br><span class="line">   dos charset = UTF-8</span><br><span class="line">   unix charset = utf-8</span><br><span class="line">   display charset = utf-8</span><br></pre></td></tr></table></figure><ul><li>如果映射过慢，可采用如下方法, 通过 testparm 检查配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在[global]下添加如下配置</span></span><br><span class="line">   <span class="built_in">read</span> raw = Yes</span><br><span class="line">   write raw = Yes</span><br><span class="line">   socket options = TCP_NODELAY IPTOS_LOWDELAY SO_RCVBUF=131072 SO_SNDBUF=131072</span><br><span class="line">   min receivefile size = 16384</span><br><span class="line">   use sendfile = <span class="literal">true</span></span><br><span class="line">   aio <span class="built_in">read</span> size = 16384</span><br><span class="line">   aio write size = 16384</span><br><span class="line">   max xmit = 65535</span><br><span class="line">   max connections = 0</span><br><span class="line">   deadtime = 0</span><br><span class="line"><span class="comment">## 配置结束</span></span><br><span class="line">[printers]</span><br><span class="line">   comment = All Printers</span><br></pre></td></tr></table></figure><h2 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h2><p>保存退出:wq</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/smbd restart  <span class="comment">## 重启SMB 使配置生效</span></span><br></pre></td></tr></table></figure><p>这个时候 samba 的安装配置工作就已经完成了，当然可以保底操作一下,确保一切正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install cifs-utils -y <span class="comment">## 安装cifs</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install samba -y <span class="comment">## 更新samba</span></span><br><span class="line"><span class="built_in">sudo</span> ufw allow samba <span class="comment">## 防火墙豁免</span></span><br><span class="line">/etc/init.d/smbd restart <span class="comment">## 重启即可</span></span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>win + R 输入\192.168.1.66\share 输入实际的主机 ip 可通过 ifconfig 在 linux 机器上查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunpl | grep smbd</span><br></pre></td></tr></table></figure><ul><li>注意：如果是服务商接入会屏蔽掉 445 139 端口<br>在配置文件的[global]项中加入一行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smb ports = 1314</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>samba 服务器功能<br>1）提供 Windows 风格文件或打印机的共享<br>2）在 Windows 网络中解析 NETBIOS 名字<br>3）提供 smb 客户功能<br>4）提供一个命令行工具，利用该工具限制支持 Windows 的某些管理功能</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
